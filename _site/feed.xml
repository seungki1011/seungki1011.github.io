<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seungki1011&apos;s Dev Blog</title>
    <description>머신러닝 엔지니어의 공부 블로그 🙂</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 10 Aug 2023 20:52:34 +0900</pubDate>
    <lastBuildDate>Thu, 10 Aug 2023 20:52:34 +0900</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
      <item>
        <title>Introduction to BentoML</title>
        <description>&lt;hr /&gt;
&lt;h2 id=&quot;bentoml-등장-배경&quot;&gt;BentoML 등장 배경&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;BentoML is designed for teams working to bring machine learning (ML) models into production in a reliable, scalable, and cost-efficient way. In particular, AI application developers can leverage BentoML to easily integrate state-of-the-art pre-trained models into their applications. By seamlessly bridging the gap between model creation and production deployment, BentoML promotes collaboration between developers and in-house data science teams.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;항상 많은 라이브러리들이 새롭게 등장하고, 보통 이 라이브러리들은 해결하려고 하는 핵심 문제가 존재 함.&lt;/p&gt;

&lt;h3 id=&quot;bentoml이-해결하려는-문제&quot;&gt;BentoML이 해결하려는 문제&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Model Serving Infra의 어려움&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Serving을 위해 다양한 라이브러리, artifact, asset 등.. 사이즈가 큰 파일을 패키징 해야함&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Cloud service에 지속적으로 배포하기 위해 많은 작업이 필요함&lt;/p&gt;

        &lt;p&gt;-&amp;gt; BentoML은 CLI로 이 문제의 복잡도를 낮추려고 함(CLI 명령어로 모두 진행 가능)&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Online Serving의 Monitoring 및 Error Handling&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Online Serving으로 API 형태로 생성&lt;/li&gt;
      &lt;li&gt;Error 처리, Logging을 추가로 구현해야 함&lt;/li&gt;
      &lt;li&gt;BentoML은 Python Logging Module을 사용해 Access Log, Prediction Log를 기본으로 제공&lt;/li&gt;
      &lt;li&gt;Config를 수정해 Logging도 커스텀할 수 있고, Prometheus 같은 Metric 수집 서버에 전송할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Online Serving의 포퍼먼스 튜닝의 어려움&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Adaptive Micro Batch 방식을 채택해 동시에 많은 요청이 들어와도 높은 처리량을 보여줌&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;bentoml-특징&quot;&gt;BentoML 특징&lt;/h2&gt;

&lt;p&gt;Serving에 특화된 가벼운 라이브러리로 볼 수 있음&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;쉬운 사용성&lt;/li&gt;
  &lt;li&gt;Online/Offline Serving 지원&lt;/li&gt;
  &lt;li&gt;Tensorflow, PyTorch, Keras, XGBoost 등 메이저 프레임워크 지원&lt;/li&gt;
  &lt;li&gt;Docker, Kubernetes, AWS, Azure 등의 배포 환경 지원 및 가이드 제공&lt;/li&gt;
  &lt;li&gt;Flask 대비 100배의 처리량&lt;/li&gt;
  &lt;li&gt;모델 저장소(Yatai) 웹 대시보드 지원&lt;/li&gt;
  &lt;li&gt;데이터 사이언스와 데브옵스 사이의 간격을 좁혀주고, 높은 성능의 serving 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-08-BentoML-1/bentoml2.png&quot; alt=&quot;bentoml2&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt; 출처 - https://towardsdatascience.com/10-ways-bentoml-can-help-you-serve-and-scale-machine-learning-models-4060f1e59d0d&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;bentoml-사용하기&quot;&gt;BentoML 사용하기&lt;/h2&gt;

&lt;h3 id=&quot;1-bentoml-설치&quot;&gt;1. BentoML 설치&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;BentoML은 python 3.6 이상만 지원&lt;/li&gt;
  &lt;li&gt;pyenv 등으로 파이썬 버전을 설정해서 진행&lt;/li&gt;
  &lt;li&gt;가상환경 virtualenv 또는 poetry로 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install bentoml&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-bentoml-flow&quot;&gt;2. BentoML Flow&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;모델 학습 코드 생성&lt;/li&gt;
  &lt;li&gt;Prediction Service Class 생성&lt;/li&gt;
  &lt;li&gt;Prediction Service에 모델 저장&lt;/li&gt;
  &lt;li&gt;Serving&lt;/li&gt;
  &lt;li&gt;Docker Image Build(컨테이너화)&lt;/li&gt;
  &lt;li&gt;Serving 배포&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;prediction-service-class-생성&quot;&gt;&lt;strong&gt;Prediction Service Class 생성&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# bento_service.py
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bentoml&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BentoService&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bentoml.adapters&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataframeInput&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bentoml.frameworks.sklearn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SklearnModelArtifact&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infer_pip_packages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@artifacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SklearnModelArtifact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IrisClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BentoService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
    A minimum prediction service exposing a Scikit-learn model
    &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataframeInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
        An inference API named `predict` with Dataframe input adapter, which codifies
        how HTTP requests or CSV files are converted to a pandas Dataframe object as the
        inference API function input
        &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;BentoService를 활용해 Prediction Service Class 생성&lt;/li&gt;
  &lt;li&gt;예측할 때 사용하는 API를 위한 Class&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;@env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infer_pip_packages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@artifacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SklearnModelArtifact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@env&lt;/code&gt; : 파이썬 패키지, install script 등 서비스에 필요한 의존성을 정의&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@artifacts&lt;/code&gt; : 서비스에서 사용할 artifact 정의 -&amp;gt; Sklearn, XGboost, Pytorch 등 ..&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IrisClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BentoService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
    A minimum prediction service exposing a Scikit-learn model
    &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataframeInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
        An inference API named `predict` with Dataframe input adapter, which codifies
        how HTTP requests or CSV files are converted to a pandas Dataframe object as the
        inference API function input
        &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;BentoService를 상속하면 해당 서비스를 Yatai(모델 이미지 레지스터리)에 저장&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@api&lt;/code&gt; : API 생성
    &lt;ul&gt;
      &lt;li&gt;Input과 Output을 원하는 형태(Dataframe, Tensor, JSON 등..)으로 선택할 수 있음&lt;/li&gt;
      &lt;li&gt;Doc string으로 Swagger에 들어갈 내용을 추가할 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@artifacts&lt;/code&gt;에 사용한 이름을 토대로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.artifacts.model&lt;/code&gt;로 접근&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;prediction-service에-저장pack&quot;&gt;&lt;strong&gt;Prediction Service에 저장(Pack)&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# bento_packer.py
# 모델 학습
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sklearn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svm&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sklearn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SVC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_iris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# bento_service.py에서 정의한 IrisClassifier
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bento_service&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IrisClassifier&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# IrisClassifier 인스턴스 생성
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris_classifier_service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IrisClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Model Artifact를 Pack
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris_classifier_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Model Serving을 위한 서비스를 Disk에 저장
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saved_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iris_classifier_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Model Artifact를 주입&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;BentoML Bundle : Prediction Service를 실행할 때 필요한 모든 코드, 구성이 포함된 폴더, 모델 제공을 위한 바이너리&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;CLI에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python bento_packer.py&lt;/code&gt; 실행 -&amp;gt; Saved to ~ 경로가 보일 것임&lt;/li&gt;
  &lt;li&gt;BentoML에 저장된 Prediction Service 확인
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bentoml list&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BentoML에 저장된 Prediction Service 폴더로 이동 후 파일 확인
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tree&lt;/code&gt; 명령어로 디렉토리 구조 확인 (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tree -L 4&lt;/code&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bentoml.yml&lt;/code&gt;에 모델의 메타 정보, 패키지 환경, API input/output, Docs 등을 확인 할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;serving&quot;&gt;&lt;strong&gt;Serving&lt;/strong&gt;&lt;/h4&gt;

&lt;h4 id=&quot;yatai-service-실행&quot;&gt;&lt;strong&gt;Yatai Service 실행&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bentoml yatai-service-start&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;localhost:3000&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;docker-image-build&quot;&gt;&lt;strong&gt;Docker Image Build&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bentoml containerize IrisClassifier:latest -t iris-classifier&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker images&lt;/code&gt;로 빌드된 이미지 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; docker 명령이나 FastAPI를 사용하지 않고 웹 서버를 띄우고, 이미지 빌드!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;bentoml-component&quot;&gt;Bentoml Component&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;BentoService&lt;/li&gt;
  &lt;li&gt;Service Environment&lt;/li&gt;
  &lt;li&gt;Model Artifact&lt;/li&gt;
  &lt;li&gt;Model Artifact Metadata&lt;/li&gt;
  &lt;li&gt;Model Management &amp;amp; Yatai&lt;/li&gt;
  &lt;li&gt;API Function and Adapters&lt;/li&gt;
  &lt;li&gt;Model Serving&lt;/li&gt;
  &lt;li&gt;Labels&lt;/li&gt;
  &lt;li&gt;Retrieving BentoServices&lt;/li&gt;
  &lt;li&gt;Web UI&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bentoservice&quot;&gt;BentoService&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bentoml.BentoService&lt;/code&gt;는 예측 서비스를 만들기 위한 베이스 클래스&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@bentoml.artifacts&lt;/code&gt; : 여러 머신러닝 모델 포함할 수 있음&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@bentoml.api&lt;/code&gt;: Input/Output 정의
    &lt;ul&gt;
      &lt;li&gt;API 함수 코드에서 ```self.artifacts.{ARTIFACT_NAME}으로 접근 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;파이썬 코드와 관련된 종속성 저장&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;service-enviroment&quot;&gt;Service Enviroment&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;파이썬 관련 환경, Docker 등을 설정 가능&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@bentoml.env(infer_pip_packages=True)&lt;/code&gt; : import를 기반으로 필요한 라이브러리 추론&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements_txt_file&lt;/code&gt;을 명시할 수 있음&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip_packages=[]&lt;/code&gt;를 사용해 버전을 명시할 수 있음&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker_base_image&lt;/code&gt;를 사용해 Base image를 지정 가능&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup_sh&lt;/code&gt;를 지정해 Docker Build 과정을 커스텀할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;model-artifact-metadata&quot;&gt;Model Artifact Metadata&lt;/h3&gt;

&lt;p&gt;Metadata 접근 방법&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;CLI&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bentoml get model:version&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;REST API&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;bentoml serve 후, /metadata로 접근&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bentoml&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;svc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;path_to_bento_service&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;model-serving&quot;&gt;Model Serving&lt;/h2&gt;

&lt;p&gt;BentoService가 Bento로 저장되면 여러 방법으로 배포할 수 있음!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Online Serving
    &lt;ul&gt;
      &lt;li&gt;클라이언트가 REST API Endpoint로 근 실시간으로 예측 요청&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Offline Batch Serving
    &lt;ul&gt;
      &lt;li&gt;예측을 계산 후, Storage에 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Edge Serving
    &lt;ul&gt;
      &lt;li&gt;모바일, IoT device에 배포&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;web-ui&quot;&gt;Web UI&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@bentoml.web_static_content&lt;/code&gt;를 사용해 웹프론트엔드에 추가할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zzsza&quot;&gt;https://github.com/zzsza&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Naver Connection Boostcamp AI Tech 5th - Product Serving(변성윤)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.bentoml.org/en/latest/overview/what-is-bentoml.html&quot;&gt;https://docs.bentoml.org/en/latest/overview/what-is-bentoml.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 08 Jul 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/BentoML-1/</link>
        <guid isPermaLink="true">http://localhost:4000/BentoML-1/</guid>
        
        
        <category>BentoML</category>
        
        <category>MLops</category>
        
      </item>
    
      <item>
        <title>Introduction to MLflow</title>
        <description>&lt;hr /&gt;
&lt;h2 id=&quot;mlflow로-해결할-pain-point&quot;&gt;MLFlow로 해결할 Pain Point&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;실험 추적이 어렵다&lt;/li&gt;
  &lt;li&gt;코드 재현이 어렵다&lt;/li&gt;
  &lt;li&gt;모델 패키징 및 배포가 어렵다&lt;/li&gt;
  &lt;li&gt;모델을 관리하기 위한 중앙 저장소가 없다&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;그럼-mlflow란&quot;&gt;그럼 MLFlow란?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;머신러닝 실험, 배포를 쉽게 관리할 수 있는 오픈 소스&lt;/li&gt;
  &lt;li&gt;CLI, GUI(웹 인터페이스) 지원&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sklearn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sklearn.model_selection&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GridSearchCV&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sklearn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;autolog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load_iris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rbf&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;svc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SVC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GridSearchCV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;clf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iris&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mlflow의-핵심-기능&quot;&gt;MLFlow의 핵심 기능&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Experiment Management &amp;amp; Tracking
    &lt;ul&gt;
      &lt;li&gt;머신러닝 관련 실험들을 관리하고, 각 실험의 내용 기록
        &lt;ul&gt;
          &lt;li&gt;여러 사람이 하나의 mlflow 서버 위에서 각자 자기 실험을 만들고 공유 할 수 있음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;실험을 정의하고 실험을 실행 할 수 있음, 실행은 머신러닝 훈련코드를 실행한 기록
        &lt;ul&gt;
          &lt;li&gt;각 실행에 사용한 소스코드, 하이퍼 파라미터, metric, 부산물(artifact, image..) 등을 저장&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Model Registry
    &lt;ul&gt;
      &lt;li&gt;MLflow로 실행한 머신러닝 모델을 Model registry(모델 저장소)에 등록 가능&lt;/li&gt;
      &lt;li&gt;모델 저장소에 모델이 저장될 때마다 해당 모델에 버전이 자동으로 올라감&lt;/li&gt;
      &lt;li&gt;모델 저장소에 등록된 모델은 다른 사람들에게 쉽게 공유 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Model Serving
    &lt;ul&gt;
      &lt;li&gt;Model Registry에 등록한 모델을 REST API형태의 서버로 serving 가능&lt;/li&gt;
      &lt;li&gt;Input == 모델의 Input&lt;/li&gt;
      &lt;li&gt;Output == 모델의 Output&lt;/li&gt;
      &lt;li&gt;직접 도커 이미지를 만들지 않아도 생성 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mlflow-component&quot;&gt;MLflow Component&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;MLflow Tracking
    &lt;ul&gt;
      &lt;li&gt;머신러닝 코드 실행, 로깅을 위한 api, ui&lt;/li&gt;
      &lt;li&gt;MLflow Tracking을 사용해 결과를 local, server에 기록해 여러 실행과 비교 가능&lt;/li&gt;
      &lt;li&gt;팀에선 다른 사용자의 결과와 비교하며 협업가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MLflow Project
    &lt;ul&gt;
      &lt;li&gt;머신러닝 프로젝트 코드를 패키징하기 위한 표준&lt;/li&gt;
      &lt;li&gt;Project
        &lt;ul&gt;
          &lt;li&gt;간단하게 소스 코드가 저장된 폴더&lt;/li&gt;
          &lt;li&gt;Git repo&lt;/li&gt;
          &lt;li&gt;의존성과 어떻게 실행해야 하는지 저장&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;MLflow Tracking API를 사용하면 MLflow는 프로젝트 버전을 모든 파라미터와 자동으로 로깅&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MLflow Model
    &lt;ul&gt;
      &lt;li&gt;모델은 모델 파일과 코드로 저장&lt;/li&gt;
      &lt;li&gt;다양한 플랫폼에 배포할 수 있는 여러 도구 제공&lt;/li&gt;
      &lt;li&gt;MLflow Tracking API를 사용하면 MLflow는 자동으로 해당 프로젝트에 대한 내용을 사용함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MLflow Registry
    &lt;ul&gt;
      &lt;li&gt;MLflow Model의 전체 lifecycle에서 사용할 수 있는 중앙 모델 저장소&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mlflow-사용하기&quot;&gt;MLflow 사용하기&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install mlflow&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-experiment-생성&quot;&gt;1. Experiment 생성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 Experiment는 진행하고 있는 머신러닝 프로젝트 단위로 구성
    &lt;ul&gt;
      &lt;li&gt;개/고양이 분류 실험, 수요량 예측 실험 ..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;정해진 Metric으로 모델 평가
    &lt;ul&gt;
      &lt;li&gt;RMSE, MSE, MAE, Accuracy..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;하나의 실험 여러개의 run&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlflow experiments create --experiment-name my-first-experiment&lt;/code&gt; : Experiment 생성&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -al&lt;/code&gt;로 mlruns 폴더 확인&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlflow experiments search&lt;/code&gt; : 생성한 experiments 목록 확인 (list는 현재 deprecated)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install numpy sklearn&lt;/code&gt; : 모델에 필요한 라이브러리 설치 (상황 마다 바뀜)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir logistic_regression&lt;/code&gt; : 폴더 생성&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi logistic_regression/train.py&lt;/code&gt; : 머신러닝 코드 생성&lt;/p&gt;

&lt;h4 id=&quot;trainpy&quot;&gt;train.py&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sklearn.linear_model&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogisticRegression&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mlflow.sklearn&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;penalty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;elasticnet&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;l1_ratio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogisticRegression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;penalty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;penalty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l1_ratio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1_ratio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;saga&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Score: %s&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
  &lt;span class=&quot;c1&quot;&gt;# auto 나오기 전에는 이렇게 사용했음
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;penalty&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;penalty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log_param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;l1_ratio&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l1_ratio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log_metric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mlflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sklearn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log_model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-mlproject&quot;&gt;2. MLProject&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Mlflow를 사용한 코드의 프로젝트 메타 정보 저장&lt;/li&gt;
  &lt;li&gt;프로젝트를 어떤 환경에서 어떻게 실행시킬지 정의&lt;/li&gt;
  &lt;li&gt;패키지 모듈의 상단에 위치&lt;/li&gt;
  &lt;li&gt;이름은 MLProject 라는 이름을 꼭 사용해야함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi logistic_regression/MLProject&lt;/code&gt;: MLProject 생성&lt;/p&gt;

&lt;p&gt;#### MLProject&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;name: tutorial

entry_points:
    main:
        command: &quot;python train.py&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-run&quot;&gt;3. Run&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 Run은 코드를 1번 실행한 것을 의미&lt;/li&gt;
  &lt;li&gt;보통 Run은 모델 학습 코드를 실행&lt;/li&gt;
  &lt;li&gt;한번의 코드 실행 == 하나의 Run 생성&lt;/li&gt;
  &lt;li&gt;Run을 하면 여러가지 내용이 기록됨
    &lt;ul&gt;
      &lt;li&gt;source : 실행한 project의 이름&lt;/li&gt;
      &lt;li&gt;version : 실행 Hash&lt;/li&gt;
      &lt;li&gt;start &amp;amp; end time&lt;/li&gt;
      &lt;li&gt;parameters : 모든 파라미터&lt;/li&gt;
      &lt;li&gt;metrics : 모델의 평가 지표, metric 시각화&lt;/li&gt;
      &lt;li&gt;tags&lt;/li&gt;
      &lt;li&gt;artifacts : 실행과정에서 생기는 다양한 파일들(이미지, 모델 피클 ..)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlflow run logistic_regression --experiment-name my-first-experiment --env-manager {환경}&lt;/code&gt; : Run으로 실행&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-07-MLFlow-1/스크린샷 2023-07-05 오후 1.18.40.png&quot; alt=&quot;스크린샷 2023-07-05 오후 1.18.40&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlflow ui&lt;/code&gt; : UI 실헹&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mlflow-autolog&quot;&gt;MLflow Autolog&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Automatic logging allows you to log metrics, parameters, and models without the need for explicit log statements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;파라미터를 매번 명시하는게 귀찮음&lt;/li&gt;
  &lt;li&gt;자동으로 로깅을 해줌&lt;/li&gt;
  &lt;li&gt;모든 프레임 워크에서 사용가능한 것은 아님!
    &lt;ul&gt;
      &lt;li&gt;pytorch.nn.Module 지원 x, pytorch lightning은 지원 ..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mlflow-배포하기&quot;&gt;MLflow 배포하기&lt;/h2&gt;

&lt;h3 id=&quot;mlflow-architecture&quot;&gt;MLflow Architecture&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Python Code(with MLflow package)
    &lt;ul&gt;
      &lt;li&gt;모델을 만들고 학습하는 코드&lt;/li&gt;
      &lt;li&gt;MLflow run으로 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Tracking Server
    &lt;ul&gt;
      &lt;li&gt;파이썬 코드가 실행되는 동안 parameter, metric, model 등 메타 정보 저장&lt;/li&gt;
      &lt;li&gt;파일 혹은 DB에 저장
        &lt;ul&gt;
          &lt;li&gt;Tracking server는 결국 DB를 바라봄&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Artifact Store
    &lt;ul&gt;
      &lt;li&gt;파이썬 코드가 실행되는 동안 생기는 model file, image 등의 아티팩트를 저장&lt;/li&gt;
      &lt;li&gt;파일 혹은 스토리지에 저장
        &lt;ul&gt;
          &lt;li&gt;Artifact Store는 결국 storage를 바라봄&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mlflow server --backend-store-uri {uri} --default-artifact-root {}&lt;/code&gt; : mlflow server 명령어로 Backend Store URI 지정가능&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-07-MLFlow-1/스크린샷 2023-07-05 오후 1.47.26.png&quot; alt=&quot;스크린샷 2023-07-05 오후 1.47.26&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mlflow-실제-use-case&quot;&gt;MLflow 실제 Use Case&lt;/h2&gt;

&lt;p&gt;MLflow Tracking Server는 하나로 통합 운영&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tracking Server를 하나 배포하고, 팀 내 모든 리서처가 이 Tracking Server에 실험 기록
    &lt;ul&gt;
      &lt;li&gt;배포할 때는 Docker Image, Kubernetes 등에 진행(회사 인프라에 따라 다름)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;로그나 모델이 한 곳에 저장되므로 팀 내 모든 실험을 공유 가능&lt;/li&gt;
  &lt;li&gt;Artifact Storage는 GCS나 S3 같은 스토리지 사용&lt;/li&gt;
  &lt;li&gt;DB는 CloudSQL이나 Aurora RDS 같은 DB 사용&lt;/li&gt;
  &lt;li&gt;두 저장소는 Tracking Server에 의해 관리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zzsza&quot;&gt;https://github.com/zzsza&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Naver Connection Boostcamp AI Tech 5th - Product Serving(변성윤)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mlflow.org/docs/latest/tracking.html&quot;&gt;https://mlflow.org/docs/latest/tracking.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 07 Jul 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/MLFlow-1/</link>
        <guid isPermaLink="true">http://localhost:4000/MLFlow-1/</guid>
        
        
        <category>MLflow</category>
        
        <category>MLops</category>
        
      </item>
    
      <item>
        <title>Introduction to Apache Airflow</title>
        <description>&lt;hr /&gt;
&lt;h2 id=&quot;apache-airflow의-등장-배경&quot;&gt;Apache Airflow의 등장 배경&lt;/h2&gt;
&lt;h3 id=&quot;batch-processing&quot;&gt;Batch Processing&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;예약된 시간에 실행되는 프로세스&lt;/li&gt;
  &lt;li&gt;일회성 실행, 주기적인 실행 전부 가능
    &lt;ul&gt;
      &lt;li&gt;월요일날 7:00시에 한번 실행, 매주 월요일 7:00에 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ml-ai-엔지니어-관점에서의-batch-processing&quot;&gt;ML, AI 엔지니어 관점에서의 Batch Processing&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;모델을 주기적으로 학습시키는 경우(continuous training)&lt;/li&gt;
  &lt;li&gt;주기적인 Batch Serving을 하는 경우&lt;/li&gt;
  &lt;li&gt;그 외 개발에서 필요한 배치성 작업&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;airflow-등장-전의-batch-process&quot;&gt;Airflow 등장 전의 Batch Process&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Linux Crontab으로 Batch Process 구축하는 경우&lt;/li&gt;
  &lt;li&gt;크론 표현식은 Batcj Process의 스케쥴링을 정의한 표현식
    &lt;ul&gt;
      &lt;li&gt;이 표현식은 다른 Batch Process 도구에서도 자주 사용됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-06-ApacheAirflow-1/스크린샷 2023-07-08 오전 11.21.17.png&quot; alt=&quot;스크린샷 2023-07-08 오전 11.21.17&quot; style=&quot;zoom:50%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt; 출처 - https://docs.aws.amazon.com/elemental-cl3/latest/apireference/channel-scheduling-cron-syntax-summary.html&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*****&lt;/code&gt; - Every minute&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0****&lt;/code&gt; - Every hour&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00***&lt;/code&gt; - Every day at 12:00 AM&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;00**FRI&lt;/code&gt; - At 12:00 AM, only on Friday&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;001**&lt;/code&gt; - At 12:00 AM, on day 1 of the month&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;https://crontab.cronhub.io/&lt;/li&gt;
  &lt;li&gt;http://www.cronmaker.com/&lt;/li&gt;
  &lt;li&gt;https://crontab.guru/&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;linux-crontab의-한계&quot;&gt;Linux Crontab의 한계&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;재실행 및 알람
    &lt;ul&gt;
      &lt;li&gt;파일을 실행하다 오류가 생긴 경우, 크론탭이 별도의 처리를 하지 않음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;실패할 경우, retry 하거나 실패했다는 알람을 보내주는 기능이 필요&lt;/li&gt;
  &lt;li&gt;과거 실행 이력 및 실행 로그를 보기 어려움&lt;/li&gt;
  &lt;li&gt;여러 파일을 실행하거나, 복잡한 파이프라인을 만들기 어려움&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&amp;gt; &lt;strong&gt;더 정교한 스케쥴링 및 워크플로우 도구가 필요함!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;스케쥴링-도구들의-등장&quot;&gt;스케쥴링 도구들의 등장&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Luigi&lt;/li&gt;
  &lt;li&gt;argo&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Prefect&lt;/li&gt;
  &lt;li&gt;MetaFlow&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;apache-airflow-소개&quot;&gt;Apache Airflow 소개&lt;/h2&gt;

&lt;p&gt;현재 스케쥴링, 워크플로우 도구의 표준&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;업데이트 주기 빠름&lt;/li&gt;
  &lt;li&gt;스케쥴링 도구로 무거울 수 있지만, 거의 모든 기능을 제공하고, 확장성이 넓어 일반적으로 스케쥴링과 파이프라인 작성 도구로 많이 사용&lt;/li&gt;
  &lt;li&gt;데이터 엔지니어링 팀에서 많이 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;airflow의-기능&quot;&gt;Airflow의 기능&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;파이썬을  사용해 스케쥴링 및 파이프라인 작성&lt;/li&gt;
  &lt;li&gt;실패 시 알람&lt;/li&gt;
  &lt;li&gt;실패 시 재실행 시도&lt;/li&gt;
  &lt;li&gt;동시 실행 워커 수&lt;/li&gt;
  &lt;li&gt;설정 및 변수 값 분리&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;airflow-사용해보기&quot;&gt;Airflow 사용해보기&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;가상환경 설정&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;python &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; venv .venv
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; .venv/bin/activate
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Airflow 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pip &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt;
pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;apache-airflow==2.2.0&apos;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Airflow 기본 디렉토리 경로 지정&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export AIRFLOW_HOME=.&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Airflow에서 사용할 DB 초기화&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;airflow db init&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DB를 초기화하면 기본 파일이 생성 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -al&lt;/code&gt;로 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Airflow에서 사용할 어드민 계정 생성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;airflow users create --username admin --password 1234 --firstname seungki --lastname kim --role Admin --email {email}&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Airflow Webserver 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;airflow webserver --port 8080&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;WebUI Dashboard 등장
    &lt;ul&gt;
      &lt;li&gt;스케쥴러가 실행중이지 않다는 에러가 보임&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;별도의 터미널을 띄워서 Airflow Scheduler 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;airflow scheduler&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web UI에서 관련 에러가 없어진 것을 확인할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dag&quot;&gt;DAG&lt;/h2&gt;

&lt;h3 id=&quot;batch-scheduling을-위한-dag-생성&quot;&gt;Batch Scheduling을 위한 DAG 생성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Airflow에서는 스케줄링할 작업을 DAG이라고 부름&lt;/li&gt;
  &lt;li&gt;DAG은 Directed Acyclic Graph의 약자로 Airflow에 한정된 개념이 아닌 소프트웨어 자료구조에서 일반적으로 다루는 개념&lt;/li&gt;
  &lt;li&gt;DAG은 이름 그대로 순환하지 않는 방향이 존재하는 그래프를 의미&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Airflow는 Crontab처럼 단순히 하나의 파일을 실행하는 것이 아닌, 여러 작업의 조합도 가능함&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DAG 1개 : 1개의 파이프라인&lt;/li&gt;
  &lt;li&gt;Task : DAG 내에서 실행할 작업&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;하나의 DAG에 여러 Task의 조합으로 구성&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-06-ApacheAirflow-1/airflow dag.jpeg&quot; alt=&quot;airflow dag&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;출처 - https://www.qubole.com/tech-blog/apache-airflow-tutorial-dags-tasks-operators-sensors-hooks-xcom&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;example) tutorial_etl_dag라는 DAG은 3가지 Task로 구성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;extract&lt;/li&gt;
  &lt;li&gt;transform&lt;/li&gt;
  &lt;li&gt;load&lt;/li&gt;
  &lt;li&gt;-&amp;gt; tutorial_etl_dag라는 DAG을 실행하면 이 3가지 Task을 순차적으로 실행함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Task가 꼭 순차적으로 진행하지 않게 할 수도 있음&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;tutorial DAG&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;print_data Task 이후, sleep, templated Task 동시(병렬) 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dag-작성하기&quot;&gt;DAG 작성하기&lt;/h2&gt;

&lt;h3 id=&quot;dag-작성&quot;&gt;DAG 작성&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;DAG을 담을 디렉토리 생성(이름은 무조건 dags)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir dags&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;dags 폴더 내에 hello_world.py 생성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;hello_world.py&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# hello_world.py
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timedelta&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;airflow&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DAG&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;airflow.utils.dates&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;days_ago&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;airflow.operators.bash&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BashOperator&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;airflow.operators.python&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PythonOperator&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# with 구문으로 DAG 정의를 시작합니다.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dag_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# DAG의 식별자용 아이디입니다.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;My First DAG&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# DAG에 대해 설명합니다.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;start_date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;days_ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# DAG 정의 기준 2일 전부터 시작합니다.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;schedule_interval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0 6 * * *&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 매일 06:00에 실행합니다.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;my_dags&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 태그 목록을 정의합니다. 추후에 DAG을 검색하는데 용이합니다.
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 테스크를 정의합니다.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# bash 커맨드로 echo hello 를 실행합니다.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BashOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;print_hello&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bash_command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;echo Hello&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;heumsi&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 이 작업의 오너입니다. 보통 작업을 담당하는 사람 이름을 넣습니다.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 이 테스크가 실패한 경우, 3번 재시도 합니다.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;retry_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 재시도하는 시간 간격은 5분입니다.
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 테스크를 정의합니다.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# python 함수인 print_world를 실행합니다.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PythonOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;print_world&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;python_callable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;depends_on_past&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;heumsi&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;retry_delay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timedelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 테스크 순서를 정합니다.
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# t1 실행 후 t2를 실행합니다.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;DAG 정의(이름, 태그)
    &lt;ul&gt;
      &lt;li&gt;언제부터 스케쥴링 할지&lt;/li&gt;
      &lt;li&gt;스케쥴링 간격은 어떻게 할 지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DAG 내 Task 정의
    &lt;ul&gt;
      &lt;li&gt;Task 정의는 Airflow의 Operator 클래스 사용&lt;/li&gt;
      &lt;li&gt;Airflow에는 다양한 Operator 클래스가 존재하며, 뒤에서 살펴봄
        &lt;ol&gt;
          &lt;li&gt;첫 번째 Task는 bash 커맨드 실행
            &lt;ul&gt;
              &lt;li&gt;Airflow에서 제공하는 BashOperator 사용&lt;/li&gt;
              &lt;li&gt;bash_command 파라미터에 bash로 실행할 커맨드 전달&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;두 번째 Tasksms Python 함수 실행
            &lt;ul&gt;
              &lt;li&gt;Airflow에서 제공하는 PythonOperator 사용&lt;/li&gt;
              &lt;li&gt;python_callable 파라미터에 실행할 파이썬 함수 전달&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dag 내 Task간 순서 정하기
    &lt;ul&gt;
      &lt;li&gt;순서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;와 같은 형태로 표현&lt;/li&gt;
      &lt;li&gt;t1 (BashOperator) 실행 후, t2 (PythonOperator)를 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;실행결과-확인&quot;&gt;실행결과 확인&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;파일을 저장하고, UI를 확인해보면 새로 생성한 DAG 보임&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DAG 상세 페이지에서 DAG을 ON 상태로 변경&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;DAG Run의 첫 번째 Task 사각형을 눌러서 Log 버튼을 클릭해서 Log 확인 가능&lt;/li&gt;
  &lt;li&gt;특정 DAG Run의 기록을 지우고 다시 실행시키고 싶으면 Clear 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;operator들-소개&quot;&gt;Operator들 소개&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Airflow에서는 다양한 Operator를 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;PythonOperator
    &lt;ul&gt;
      &lt;li&gt;파이썬 함수를 실행&lt;/li&gt;
      &lt;li&gt;함수 뿐 아니라, Callable한 객체를 파라미터로 넘겨 실행 가능&lt;/li&gt;
      &lt;li&gt;실행할 파이썬 로직을 함수로 생성한 후, PythonOperator로 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BashOperator
    &lt;ul&gt;
      &lt;li&gt;Bash 커맨드를 실행&lt;/li&gt;
      &lt;li&gt;실행해야할 프로세스가 파이썬이 아닌 경우에도 BashOperator로 실행 가능
        &lt;ul&gt;
          &lt;li&gt;shell script, scala file ..&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DummyOperator
    &lt;ul&gt;
      &lt;li&gt;아무것도 실행하지 않음&lt;/li&gt;
      &lt;li&gt;DAG내에서 Task를 구성할 때, 여러 개의 Task의 Success를 기다려야 하는 복잡한 Task 구성에서 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SimpleHttpOperator
    &lt;ul&gt;
      &lt;li&gt;특정 호스트로 HTTP 요청을 보내고 Response로 반환&lt;/li&gt;
      &lt;li&gt;파이썬 함수에서 requests 모듈로 사용한 뒤 PythonOperator로 실행시켜도 무방&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;그 외
    &lt;ul&gt;
      &lt;li&gt;KubernetesOperator&lt;/li&gt;
      &lt;li&gt;OckerOperator&lt;/li&gt;
      &lt;li&gt;CustomOperator&lt;/li&gt;
      &lt;li&gt;등..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클라우드 기능을 추상화한 Operator도 존재함(AWS, GCP ..)
    &lt;ul&gt;
      &lt;li&gt;provider packages&lt;/li&gt;
      &lt;li&gt;Third Party와 연동해 사용하는 Operator의 경우 Airflow 설치 시에 다음처럼 extra package를 설치해야 함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;추가적으로-학습-할-내용&quot;&gt;추가적으로 학습 할 내용&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Variable&lt;/li&gt;
  &lt;li&gt;Connections &amp;amp; Hooks&lt;/li&gt;
  &lt;li&gt;Sensor&lt;/li&gt;
  &lt;li&gt;Marker&lt;/li&gt;
  &lt;li&gt;XComs&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;airflow-architecture&quot;&gt;Airflow Architecture&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-06-ApacheAirflow-1/airflow-architecture.png&quot; alt=&quot;airflow-architecture&quot; class=&quot;center-image&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/overview.html&lt;/p&gt;

&lt;h3 id=&quot;dag-directory&quot;&gt;DAG Directory&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DAG 파일들을 저장&lt;/li&gt;
  &lt;li&gt;DAG_FOLDER&lt;/li&gt;
  &lt;li&gt;Scheduler에 의해 .py 파일은 모두 탐색되고 DAG에 파싱&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scheduler&quot;&gt;Scheduler&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;각종 메타 정보의 기록을 담당&lt;/li&gt;
  &lt;li&gt;DAG들의 스케쥴링 관리&lt;/li&gt;
  &lt;li&gt;실행 진행 상황과 결과를 DB에 저장&lt;/li&gt;
  &lt;li&gt;Executer를 통해 실제로 스케쥴링된 DAG을 실행&lt;/li&gt;
  &lt;li&gt;Airflow의 가장 핵심적인 component&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;scheduler---executer&quot;&gt;Scheduler - Executer&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;스케쥴링된 DAG을 실행하는 객체, 크게 2개로 나뉨&lt;/p&gt;

    &lt;h5 id=&quot;local-executer&quot;&gt;Local Executer&lt;/h5&gt;

    &lt;ul&gt;
      &lt;li&gt;DAG Run을 프로세스 단위로 실행하며, 다음 처럼 나뉨
        &lt;ul&gt;
          &lt;li&gt;Local
            &lt;ul&gt;
              &lt;li&gt;하나의 DAG Run을 프로세스로 띄워서 실행&lt;/li&gt;
              &lt;li&gt;최대로 생성할 프로세스 수를 정해야 함&lt;/li&gt;
              &lt;li&gt;Airflow를 간단하게 운영할 때 적합&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Sequential
            &lt;ul&gt;
              &lt;li&gt;하나의 프로세스에서 모든 DAG Run들을 처리&lt;/li&gt;
              &lt;li&gt;Airflow 기본 Executer, 별도 설정이 없으면 이것을 사용&lt;/li&gt;
              &lt;li&gt;테스트용으로 잠시 운영할 때 적합&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;h5 id=&quot;remote-executer&quot;&gt;Remote Executer&lt;/h5&gt;

    &lt;ul&gt;
      &lt;li&gt;DAG을 외부 프로세스로 실행
        &lt;ul&gt;
          &lt;li&gt;Celery
            &lt;ul&gt;
              &lt;li&gt;DAG Run을 Celery Work Process로 실행&lt;/li&gt;
              &lt;li&gt;보통 Redis를 중간에 두고 같이 사용&lt;/li&gt;
              &lt;li&gt;Local Executer를 사용하다 Airflow 운영 규모가 좀 더 커지면 Celery Executor로 전환&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Kubernetes
            &lt;ul&gt;
              &lt;li&gt;쿠버네티스 상에서 Airflow를 운영할 때 사용&lt;/li&gt;
              &lt;li&gt;DAG Run 하나가 하나의 Pod(컨테이너 같은 개념)&lt;/li&gt;
              &lt;li&gt;운영 규모가 큰 팀에서 사용&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;workers&quot;&gt;Workers&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DAG을 실제로 실행&lt;/li&gt;
  &lt;li&gt;Scheduler에 의해 생기고 실행&lt;/li&gt;
  &lt;li&gt;Executer에 따라 워커의 형태가 다름
    &lt;ul&gt;
      &lt;li&gt;Celery, Local Executer의 경우 Worker는 Process&lt;/li&gt;
      &lt;li&gt;Kubernetes의 경우 Worker는 Pod&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dag Run을 실행하는 과정에서 생기는 로그를 저장&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;metadata-database&quot;&gt;Metadata Database&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;메타 정보를 저장&lt;/li&gt;
  &lt;li&gt;Scheduler에 메타 정보가 쌓임&lt;/li&gt;
  &lt;li&gt;보토 MySQL이나 Postgres를 사용&lt;/li&gt;
  &lt;li&gt;파싱한 DAG 정보, DAG Run 상태와 실행 내용, Task 정보 등을 저장&lt;/li&gt;
  &lt;li&gt;User와 Role(RBAC)에 대한 정보 저장&lt;/li&gt;
  &lt;li&gt;Scheduler와 더불어서 핵심 컴포넌트&lt;/li&gt;
  &lt;li&gt;트러블 슈팅 시, 디버깅을 위해 직접 DB에 연결해서 데이터를 확인하기도 함&lt;/li&gt;
  &lt;li&gt;실제 운영 환경에서는 GCP Cloud SQL이나 AWS Aurora DB 등.. 외부 DB 인스턴스를 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;webserver&quot;&gt;WebServer&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;WebUI를 담당&lt;/li&gt;
  &lt;li&gt;Metadata DB와 통신하며 유저에게 필요한 메타정보를 웹 브라우저에 보여주고 시각화&lt;/li&gt;
  &lt;li&gt;보통 Airflow 사용자들은 이 웹서버를 이용하여 DAG을 ON/OFF 하면서, 현 상황 파악&lt;/li&gt;
  &lt;li&gt;REST API도 제공하기 때문에, Web UI를 통해서 통신하지 않아도 괜찮음&lt;/li&gt;
  &lt;li&gt;웹서버가 당장 작동하지 않아도 Airflow에 큰 장애가 발생하는 것은 아님&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;실제-airflow-구축-및-활용&quot;&gt;실제 Airflow 구축 및 활용&lt;/h2&gt;

&lt;p&gt;Airflow를 구축하는 방법은 보통 3가지 방법을 사용함&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Managed Airflow (GCP Composer, AWS MWAA)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;클라우드 서비스 형태로 Airflow를 사용하는 방법&lt;/li&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;설치와 구축을 클릭 몇번으로 클라우드 서비스가 진행&lt;/li&gt;
          &lt;li&gt;유조는 DAG 파일을 스토리지(업로드) 형태로 관리&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;비용&lt;/li&gt;
          &lt;li&gt;자유도가 적음, 제약이 많음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;VM + Docker Compose&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;직접 VM 위에서 Docker Compose로 Airflow를 배포하는 방법&lt;/li&gt;
      &lt;li&gt;Airflow 구축에 필요한 컴포넌트(Scheduler, Webserver, Database..)를 Docker 컨테이너 형태로 배포&lt;/li&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;Managed Service 보다는 조금 복잡하지만, 어려운 난이도는 아님&lt;/li&gt;
          &lt;li&gt;Docker Compose에 익숙하면 금방 익힐 수 있음&lt;/li&gt;
          &lt;li&gt;하나의 VM만을 이용하기 때문에 단순&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;각 Docker 컨테이너 별로 환경이 다르기 때문에, 관리 포인트가 늘어남&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kubernetes + Helm&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Helm 차트로 Airflow를 배포하는 방법&lt;/li&gt;
      &lt;li&gt;Kubernetes는 여러 개의 VM을 동적으로 운영하는 일종의 분산환경, 리소스 사용이 매우 유연함(Scalability가 좋음)&lt;/li&gt;
      &lt;li&gt;특정 시간에 배치 프로세스를 실행시키는 Airflow와 궁합이 매우 잘 맞음&lt;/li&gt;
      &lt;li&gt;Airflow DAG 수가 몇 백개로 늘어나도 노드 오토 스케일링으로 모든 프로세스를 잘 처리할 수 있음&lt;/li&gt;
      &lt;li&gt;쿠버네티스 자체가 난이도가 있음 -&amp;gt; 구축, 운영이 어려움&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-06-ApacheAirflow-1/kuber-airflow-socar.png&quot; alt=&quot;kuber-airflow-socar&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;출처 - https://tech.socarcorp.kr/data/2021/06/01/data-engineering-with-airflow.html&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mlops-관점에서의-airflow&quot;&gt;MLOps 관점에서의 Airflow&lt;/h2&gt;

&lt;p&gt;데이터 엔지니어링에서 많이 쓰이지만, MLOps에서도 활용가능&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;주기적인 실행이 필요한 경우
    &lt;ul&gt;
      &lt;li&gt;Batch Training : 1주일 단위로 모델 학습&lt;/li&gt;
      &lt;li&gt;Batch Serving(Batch Inference) : 30분 단위로 인퍼런스&lt;/li&gt;
      &lt;li&gt;인퍼런스 겨로가를 기반으로 일자별, 주차별 모델 퍼포먼스 Report 생성&lt;/li&gt;
      &lt;li&gt;MySQL에 저장된 메타 데이터를 데이터 웨어하우스로 1시간 단위로 옮기기&lt;/li&gt;
      &lt;li&gt;S3, GCS 등 Object Storage&lt;/li&gt;
      &lt;li&gt;Feature Store를 만들기 위해 Batch ETL 실행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zzsza&quot;&gt;https://github.com/zzsza&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Naver Connection AI Tech 5th - Product Serving(변성윤)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 06 Jul 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/ApacheAirflow-1/</link>
        <guid isPermaLink="true">http://localhost:4000/ApacheAirflow-1/</guid>
        
        
        <category>Airflow</category>
        
        <category>Mlops</category>
        
      </item>
    
      <item>
        <title>Logging</title>
        <description>&lt;hr /&gt;
&lt;h2 id=&quot;logging&quot;&gt;Logging&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;사용자 로그 데이터, 이벤트 로그 데이터 ..&lt;/li&gt;
  &lt;li&gt;머신러닝 인퍼런스 요청 로그, 인퍼런스 결과 등을 저장해야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;데이터의-종류&quot;&gt;데이터의 종류&lt;/h2&gt;

&lt;h3 id=&quot;데이터베이스-데이터서비스-로그&quot;&gt;데이터베이스 데이터(서비스 로그)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Database에 저장되는 데이터&lt;/li&gt;
  &lt;li&gt;서비스가 운영되기 위해 필요한 데이터
    &lt;ul&gt;
      &lt;li&gt;고객 가입일, 물건 구입 내역 등..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;사용자-행동-데이터유저-행동-로그&quot;&gt;사용자 행동 데이터(유저 행동 로그)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Object storage, Data Warehouse에 주로 저장&lt;/li&gt;
  &lt;li&gt;유저 로그라고 지칭하면 보통 사용자 행동 데이터를 의미&lt;/li&gt;
  &lt;li&gt;서비스에 반드시 필요한 내용은 아니지만, 더 좋은 제품을 만들기 위해 또는 데이터 분석시 필요한 데이터&lt;/li&gt;
  &lt;li&gt;앱이나 웹에서 유저가 어떤 행동을 하는지 나타내는 데이터&lt;/li&gt;
  &lt;li&gt;UX와 관련해서 인터랙션이 이루어지는 관점에 발생하는 데이터
    &lt;ul&gt;
      &lt;li&gt;click, view, swipe ..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;인프라-데이터metric&quot;&gt;인프라 데이터(Metric)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;백엔드 웹 서버가 제대로 동작하고 있는지 확인하는 데이터&lt;/li&gt;
  &lt;li&gt;request 수, response 수&lt;/li&gt;
  &lt;li&gt;DB 부하&lt;/li&gt;
  &lt;li&gt;트래픽&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;metric-log-trace&quot;&gt;Metric, Log, Trace&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Metric
    &lt;ul&gt;
      &lt;li&gt;값을 측정할 때 사용&lt;/li&gt;
      &lt;li&gt;cpu, memory 사용량&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Log
    &lt;ul&gt;
      &lt;li&gt;운영 관점에서 알아야하는 데이터를 남길 때 사용&lt;/li&gt;
      &lt;li&gt;함수의 호출, 예외 처리 등..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Trace
    &lt;ul&gt;
      &lt;li&gt;개발 관점에서 알아야하는 것&lt;/li&gt;
      &lt;li&gt;예외 trace&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;데이터-적재-방식&quot;&gt;데이터 적재 방식&lt;/h2&gt;

&lt;h3 id=&quot;databaserdbms&quot;&gt;Database(RDBMS)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;데이터가 다시 웹, 앱 서비스에서 사용되는 경우 활용&lt;/li&gt;
  &lt;li&gt;실제 서비스용 DB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;구체적으로 들어가면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;관계형 데이터베이스(relational)&lt;/li&gt;
  &lt;li&gt;행과 열로 구성&lt;/li&gt;
  &lt;li&gt;데이터의 관계를 정의하고, 데이터 모델링 진행&lt;/li&gt;
  &lt;li&gt;비즈니스와 연관된 중요한 정보
    &lt;ul&gt;
      &lt;li&gt;고객 정보, 주문 요청, 내역 ..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;영구적으로 저장해야 하는 것은 데이터베이스에 저장&lt;/li&gt;
  &lt;li&gt;데이터 추출시 SQL 사용&lt;/li&gt;
  &lt;li&gt;MySQL, PostgreSQL ..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-05-Logging/DMBS-RDBMS.png&quot; alt=&quot;DMBS-RDBMS&quot; style=&quot;zoom:50%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;https://www.stechies.com/differences-between-dbms-rdbms/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-05-Logging/스크린샷 2023-07-04 오후 10.44.36.png&quot; alt=&quot;스크린샷 2023-07-04 오후 10.44.36&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;Naver Boostcamp AI Tech 5th - Product Serving&lt;/p&gt;

&lt;h3 id=&quot;databasenosql&quot;&gt;Database(NoSQL)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Elasticsearch, Logstash or Fluent, Kibana에서 활용하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;구체적으로 들어가면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스키마가 strict한 RDBMS와 다르게 스키마가 없거나 느슨함&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Not Only SQL&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;데이터가 많아지며 RDBMS로 트래픽을 감당하기 어려워서 개발됨&lt;/li&gt;
  &lt;li&gt;일반적으로 RDBMS에 비해 쓰기와 읽기 성능이 빠름&lt;/li&gt;
  &lt;li&gt;Key Value store, document, column family, graph ..&lt;/li&gt;
  &lt;li&gt;json 형태와 비슷하며 xml 등도 활용됨&lt;/li&gt;
  &lt;li&gt;MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sql-vs-nosql&quot;&gt;SQL vs NoSQL&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-05-Logging/SQL-Vs-NoSQL-Data-Structures-infographics.jpg&quot; alt=&quot;SQL-Vs-NoSQL-Data-Structures-infographics&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;https://expeed.com/when-to-use-sql-databases-vs-nosql-databases-making-the-right-decision/&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;object-storage&quot;&gt;Object Storage&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;S3, Cloud Storage에 파일 형태로 저장&lt;/li&gt;
  &lt;li&gt;csv, parquet, json ..&lt;/li&gt;
  &lt;li&gt;별도로 DB나 warehouse로 옮기는 작업이 필요함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;구체적으로 들어가면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 형태의 파일이여도 저장할 수 있는 저장소&lt;/li&gt;
  &lt;li&gt;특정 시스템에 발생하는 로그를 xxx.log에 저장한 후, object storage에 저장하는 형태&lt;/li&gt;
  &lt;li&gt;비즈니스에서 사용되지 않는 분석을 위한 데이터&lt;/li&gt;
  &lt;li&gt;이미지, 음성 등을 저장&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-warehouse&quot;&gt;Data Warehouse&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;데이터 분석시 활용하는 데이터 웨어하우스로 바로 저장&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;여러 공간에 저장된 데이터를 한곳으로 저장&lt;/li&gt;
  &lt;li&gt;데이터 창고 같은 느낌으로 알면 편함&lt;/li&gt;
  &lt;li&gt;RDBMS, NoSQL, Object Storage 등에서 저장한 데이터를 한 곳으로 옮겨서 처리&lt;/li&gt;
  &lt;li&gt;RDBMS와 같은 SQL을 사용하지만 성능이 더 좋은 편&lt;/li&gt;
  &lt;li&gt;AWS Redshift, GCP BigQuery, Snowflake ..&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;print-vs-logging&quot;&gt;Print vs Logging&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;print는 콘솔에만 output을 출력하는 경우로 생각하자&lt;/li&gt;
  &lt;li&gt;logging은 file, web socket 등 파이썬이 다룰 수 있는 모든 포맷으로 output 출력 가능
    &lt;ul&gt;
      &lt;li&gt;언제 어디서 해당 output의 발생을 알 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;심각도에 따른 분류를 할 수 있음
    &lt;ul&gt;
      &lt;li&gt;develop 환경에서는 debug로그 까지, production 환경에서는 info 로그만&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;#### 1. logging module 써보기
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# root logger
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;hello world&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 아무런 로그도 출력되지 않습니다.
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#### 1.1 logging module config 추가하기
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging.config&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# required
&lt;/span&gt;    &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;disable_existing_loggers&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 다른 Logger를 overriding 합니다
&lt;/span&gt;    &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;formatters&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;simple&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%(asctime)s | %(levelname)s - %(message)s&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;logging.StreamHandler&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;simple&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;loggers&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dictConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger_with_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logger_with_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;이제는 보이죠?&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Config 설정을 해야 output 출력&lt;/li&gt;
  &lt;li&gt;지정한 로그 포맷 형태로 로그 출력 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;format&quot;: &quot;%(asctime)s | %(levelname)s - %(message)s&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/logging.html&quot;&gt;https://docs.python.org/3/library/logging.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;python-logging-component&quot;&gt;Python Logging Component&lt;/h2&gt;

&lt;h3 id=&quot;logger&quot;&gt;Logger&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;로그를 생성하는 method 제공(logger.info(), ..)&lt;/li&gt;
  &lt;li&gt;로그 level과 logger에 적용된 filter를 기반으로 처리해야 하는 로그인지 판단&lt;/li&gt;
  &lt;li&gt;handler에게 logrecord 인스턴스 전달&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging.getLogger(name)&lt;/code&gt;으로 Logger Object 사용
    &lt;ul&gt;
      &lt;li&gt;name이 주어지면 해당 name의 logger 사용&lt;/li&gt;
      &lt;li&gt;name이 없으면 root logger 사용&lt;/li&gt;
      &lt;li&gt;마침표로 구분되는 계층 구조
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging.getLogger(&apos;foo.bar&apos;)&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging.getLogger(&apos;foo&apos;)&lt;/code&gt;의 자식 logger 반환&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging.setLevel()&lt;/code&gt; : Logger에서 사용할 level 지정&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;handler&quot;&gt;Handler&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Logger에서 만들어진 log를 적절한 위치로 전송(파일 또는 콘솔 출력..)&lt;/li&gt;
  &lt;li&gt;level과 formatter를 각각 설정해서 필터링 할 수 있음&lt;/li&gt;
  &lt;li&gt;StreamHandler, FileHandler, HTTPHandler ..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-05-Logging/handler.png&quot; alt=&quot;handler&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt; https://www.toptal.com/python/in-depth-python-logging &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Formatter
    &lt;ul&gt;
      &lt;li&gt;최종적으로 log에 출력될 포맷 설정&lt;/li&gt;
      &lt;li&gt;시간, logger 이름, 심각도, output, 함수 이름, line 정보, 메세지 ..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;logging-flow&quot;&gt;Logging Flow&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-05-Logging/logging_flow.png&quot; alt=&quot;logging_flow&quot; style=&quot;zoom: 67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt; https://docs.python.org/ko/3/howto/logging.html &lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;online-serving-logging-bigquery&quot;&gt;Online Serving Logging (BigQuery)&lt;/h2&gt;

&lt;p&gt;BigQuery에 Online Serving Input과 Output 로그를 적재하는 과정&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;빅쿼리 테이블을 세팅&lt;/li&gt;
  &lt;li&gt;빅쿼리에 적재하기 쉽게 json 형태로 로그를 정제 -&amp;gt; &lt;a href=&quot;https://github.com/madzak/python-json-logger&quot;&gt;pythonjsonlogger&lt;/a&gt; 사용&lt;/li&gt;
  &lt;li&gt;Python logging 모듈을 사용해서 빅쿼리에 실시간으로 로그 적재(file과 console에도 남을 수 있도록 handle 지정)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;bigquery-data-structure&quot;&gt;BigQuery Data Structure&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-05-Logging/BigQuery_Resources.png&quot; alt=&quot;BigQuery_Resources&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt; https://jayendrapatil.com/google-cloud-bigquery/ &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GCP의 project 내부에 BigQuery 리소스가 존재&lt;/li&gt;
  &lt;li&gt;Dataset 안에 Table, Views ..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zzsza&quot;&gt;https://github.com/zzsza&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Naver Connection Boostcamp AI Tech 5th - Product Serving(변성윤)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 05 Jul 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/Logging/</link>
        <guid isPermaLink="true">http://localhost:4000/Logging/</guid>
        
        
        <category>Backend</category>
        
        <category>DB</category>
        
        <category>Data</category>
        
      </item>
    
      <item>
        <title>FastAPI - 2</title>
        <description>&lt;hr /&gt;
&lt;h2 id=&quot;event-handler&quot;&gt;Event Handler&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;이벤트가 발생했을 때, 그 처리를 담당하는 함수&lt;/li&gt;
  &lt;li&gt;FastAPI 에선 Application을 실행, 종료할 때 특정 함수를 실행할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-@app.on_event(&amp;quot;startup&amp;quot;)```&quot;&gt;
``` @app.on_event(&quot;shutdown&quot;)```

* startup 할 때 머신러닝 모델 load
* shutdown 할 때 로그 저장

```python
from fastapi import FastAPI
import uvicorn

app = FastAPI()

items = {}

@app.on_event(&quot;startup&quot;)
def startup_event():
    print(&quot;Start Up Event&quot;)
    items[&quot;foo&quot;] = {&quot;name&quot;: &quot;Fighters&quot;}
    items[&quot;bar&quot;] = {&quot;name&quot;: &quot;Tenders&quot;}

@app.on_event(&quot;shutdown&quot;)
def shutdown_event():
    print(&quot;Shutdown Event!&quot;)
    with open(&quot;log.txt&quot;, mode=&quot;a&quot;) as log:
        log.write(&quot;Application shutdown&quot;)

@app.get(&quot;/items/{item_id}&quot;)
def read_items(item_id: str):
    return items[item_id]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;api-router&quot;&gt;API Router&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;API router는 더큰 애플리케이션들에서 많이 사용되는 기능&lt;/li&gt;
  &lt;li&gt;API endpoint를 정의&lt;/li&gt;
  &lt;li&gt;Python subpackage 모듈&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;API router는 mini FastAPI로 여러 API를 연결해서 사용&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;기존에 사용하던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@app.get&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@app.post&lt;/code&gt;를 사용하지 않고, router 파일을 따로 설정하고 app에 import 해서 사용함&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APIRouter&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;user_router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;APIRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/users&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;order_router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;APIRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/orders&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@user_router.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Rick&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Morty&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@user_router.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/me&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_user_me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;fakecurrentuser&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@user_router.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/{username}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@order_router.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_orders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Taco&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Burritto&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@order_router.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/me&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_order_me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;my_order&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;taco&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@order_router.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/{order_id}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;orders&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include_router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include_router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;user router, order router 2개 생성&lt;/li&gt;
  &lt;li&gt;app에 연결 - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include_router&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;실제 활용한다면 하나의 파일에 저장하지 않고 각각 저장해서 사용
    &lt;ul&gt;
      &lt;li&gt;user.py, order.py&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;프로젝트-구조-예제&quot;&gt;프로젝트 구조 예제&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-04-FastAPI-2/스크린샷 2023-07-04 오후 8.41.27.png&quot; alt=&quot;스크린샷 2023-07-04 오후 8.41.27&quot; style=&quot;zoom: 40%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;error-handling&quot;&gt;Error Handling&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;웹 서버를 안정적으로 운영하기 위해 반드시 필요한 주제&lt;/li&gt;
  &lt;li&gt;서버에서 Error가 발생한 경우, 어떤 Error가 발생했는지 알아야하고, 해당 클라이언트에 해당 정보를 전달해 대응할 수 있어야 함&lt;/li&gt;
  &lt;li&gt;서버 개발자는 모니터링 도구를 사용해 Error Log 수집&lt;/li&gt;
  &lt;li&gt;발생하고 있는 오류를 빠르게 수정할 수 있도록 예외 처리를 잘 만들 필요가 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTPException&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Boostcamp&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;AI&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Tech&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/v1/{item_id}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/v2/{item_id}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTTPException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;아이템을 찾을 수 없습니다 [id: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;item_id&lt;/code&gt;가 1~3 까진 정상&lt;/li&gt;
  &lt;li&gt;4이상의 숫자가 들어올 경우 key error가 발생&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Internal Server Error, 500 return&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;클라이언트는 어떤 에러가 난 것인지 정보를 모름&lt;/li&gt;
  &lt;li&gt;자세한 에러를 보려면 서버에 직접 접근해서 로그를 확인해야 함&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;에러 핸들링을 위해서는 에러 메세지와 에러의 이유 등을 클라이언트에 전달하도록 코드를 잘 작성해야 함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;FastAPI의 HTTPException은 Error response를 더 쉽게 봴 수 있도록 하는 클래스&lt;/li&gt;
  &lt;li&gt;HTTPException을 이용해서 클라이언트에게 더 자세한 에러 메세지를 보내는 코드 작성&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;background-task&quot;&gt;Background Task&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;FastAPI는 Starlett이라는 비동기 프레임워크를 래핑해서 사용&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Background Task 기능은 오래 걸리는 작업들을 background에서 실행 함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;CPU 사용이 많은 작업들을 background로 실행하면, 클라이언트는 작업 완료를 기다리지 않고 즉시 response를 받아볼 수 있음
    &lt;ul&gt;
      &lt;li&gt;Example) 특정 작업 후 이메일 전송&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# 1. simple long-running tasks
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contextlib&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundTasks&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pydantic&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install_signal_handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@contextlib.contextmanager&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_in_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1e-3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should_exit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_tasks_in_fastapi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
    FastAPI Client를 실행하고, task를 요청합니다

    Returns:
        List: responses
    &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run_in_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;responses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://127.0.0.1:5000/task&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responses&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cpu_bound_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;task done after &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TaskInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;le&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app_1.post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/task&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cpu_bound_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;run_tasks_in_fastapi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Simple Tasks: Took &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 2. background tasks
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app_2.post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/task&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;202&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 비동기 작업이 등록됐을 때, HTTP Response 202 (Accepted)를 보통 리턴합니다. https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/202
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_task_in_background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;background_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;background_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu_bound_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;run_tasks_in_fastapi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Background Tasks: Took &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 3. background tasks with in-memory task repo
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uuid4&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app_3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TaskInput2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task_repo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cpu_bound_task_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;task done after &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task_repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app_3.post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/task&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;202&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_task_in_background_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskInput2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;background_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BackgroundTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;background_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu_bound_task_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id_&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app_3.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/task/{task_id}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_task_result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Background Task를 사용하지 않은 작업들은 작업 시간 만틈 응답을 기다려야 함&lt;/li&gt;
  &lt;li&gt;작업 결과물을 조회할 때는 task를 어딘가에 저장해두고, GET 요청을 통해 task가 완료됐는지 확인
    &lt;ul&gt;
      &lt;li&gt;GET을 통해 리소스가 있는 확인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;fastapi-학습&quot;&gt;FastAPI 학습&lt;/h2&gt;

&lt;h3 id=&quot;프로젝트-구조&quot;&gt;프로젝트 구조&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Cookiecutter&lt;/li&gt;
  &lt;li&gt;프로젝트 구조에 대한 템플릿 공유&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cookiecutter/cookiecutter&quot;&gt;https://github.com/cookiecutter/cookiecutter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;CLI 형태로 프로젝트 생성 과정을 도와줌&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개인용 템플릿을 만들어보는 것도 좋은 방법(개인 설정 템플릿화)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;처음 진행은 스크래치 부터 작성해서 익숙해지기&lt;/li&gt;
  &lt;li&gt;익숙해지고 다른 프로젝트 구조 참고&lt;/li&gt;
  &lt;li&gt;클린 아키텍쳐 관련 책 보면서 고민하기&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;객체-지향&quot;&gt;객체 지향&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;현재 가지고 있는 코드를 Class로 변경해보기&lt;/li&gt;
  &lt;li&gt;pydantic Use Case 찾아보기&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;trial-and-error&quot;&gt;Trial and Error&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;코드 작성 -&amp;gt; 수정 -&amp;gt; 코드 작성 반복&lt;/li&gt;
  &lt;li&gt;작은 규모의 프로젝트부터 하나씩 만들어보기
    &lt;ul&gt;
      &lt;li&gt;기능 정의 후 하나씩 구현&lt;/li&gt;
      &lt;li&gt;명확한 목표&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zzsza&quot;&gt;https://github.com/zzsza&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Naver Connection Boostcamp AI Tech 5th - Product Serving(변성윤)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fastapi.tiangolo.com/ko/&quot;&gt;https://fastapi.tiangolo.com/ko/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 04 Jul 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/FastAPI-2/</link>
        <guid isPermaLink="true">http://localhost:4000/FastAPI-2/</guid>
        
        
        <category>Backend</category>
        
        <category>FastAPI</category>
        
      </item>
    
      <item>
        <title>FastAPI - 1</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;fastapi&quot;&gt;FastAPI&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;최근 떠오르는 Python Web Framework&lt;/li&gt;
  &lt;li&gt;API document 작성을 자동으로 해주는 Swagger&lt;/li&gt;
  &lt;li&gt;간결한 코드 작성&lt;/li&gt;
  &lt;li&gt;빠른 속도&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-04-FastAPI-1/fastapi-vs-flask-and-django.jpg&quot; alt=&quot;fastapi-vs-flask-and-django&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;출처 - https://quintagroup.com/services/python/fastapi&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;path-parameter-query-parameter&quot;&gt;Path Parameter, Query Parameter&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;웹에서 get method를 사용해 데이터를 전송할 수 있음&lt;/li&gt;
  &lt;li&gt;ID가 402인 사용자 정보를 가져오고 싶은 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;path-parameter-방식&quot;&gt;Path Parameter 방식&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;/users/402&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;서버에 402라는 값을 전달하고 변수로 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;query-parameter-방식&quot;&gt;Query Parameter 방식&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;/users?id=402&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Query String&lt;/li&gt;
  &lt;li&gt;API뒤에 입력 데이터를 함께 제공하는 방식으로 사용&lt;/li&gt;
  &lt;li&gt;Query String은 Key, Value의 쌍으로 이루어지며 &amp;amp;로 연결해 여러 데이터를 넘길 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;path-vs-query&quot;&gt;Path vs Query&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;언제 어떤 방식을 사용해야 할까?&lt;/li&gt;
  &lt;li&gt;상황마다 다름&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example1&quot;&gt;Example1)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 리소스를 식별하고 싶은 경우(그러나 kyle이라는 유저가 없음)&lt;/li&gt;
  &lt;li&gt;Path : /users/Kyle
    &lt;ul&gt;
      &lt;li&gt;경로에 존재하는 내용이 없으면 404 에러 발생&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Query : /users?name=kyle
    &lt;ul&gt;
      &lt;li&gt;데이터가 없는 경우 빈 리스트 -&amp;gt; 추가적인 에러 핸들링&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;보편적인 경우&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;리소스 식별 : Path parameter가 적합&lt;/li&gt;
  &lt;li&gt;정렬, 필터링 : Query parameter가 적합&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;path-parameter&quot;&gt;Path Parameter&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;GET method : 정보를 Read하기 위해 사용&lt;/li&gt;
  &lt;li&gt;유저 정보에 접근하는 API&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FastAPI&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/users/{user_id}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;FastAPI는 데코레이터로 GET, POST 표시&lt;/li&gt;
  &lt;li&gt;@app.get, @app.post&lt;/li&gt;
  &lt;li&gt;GET method의 인자로 있는 {user_id}가 함수의 값으로 인풋&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;query-parameter&quot;&gt;Query Parameter&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;URL뒤에 ? 붙이고 Key, Value 형태로 연결&lt;/li&gt;
  &lt;li&gt;Localhost:8000/items/?skip=0&amp;amp;limit=10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uvicorn main:app --reload&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FastAPI&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# DB 같은 느낌으로 사용
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fake_items_db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;item_name&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;item_name&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;item_name&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Baz&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/items/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fake_items_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;optional-path&quot;&gt;Optional Path&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;특정 파라미터는 선택적으로 사용하고 싶은 경우&lt;/li&gt;
  &lt;li&gt;Typing 모듈의 Optional 사용&lt;/li&gt;
  &lt;li&gt;Optional을 이용해 이 파라미터는 Optional 임을 명시&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;request-body&quot;&gt;Request Body&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;클라이언트에서 API에 데이터를 보낼 때 request body 사용
    &lt;ul&gt;
      &lt;li&gt;client -&amp;gt; API : request body&lt;/li&gt;
      &lt;li&gt;API response -&amp;gt; client : response body&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Request body에 데이터가 항상 포함되어야 하는 것은 아님&lt;/li&gt;
  &lt;li&gt;Request body에 데이터를 보내고 싶다면 POST Method 사용
    &lt;ul&gt;
      &lt;li&gt;GET Method는 URL, Request header로 데이터 전달&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;POST Method는 Request body에 데이터를 넣어 보냄&lt;/li&gt;
  &lt;li&gt;Body의 데이터를 설명하는 content-type Header field 존재, 데이터 타입 명시 해야함
    &lt;ul&gt;
      &lt;li&gt;Application/x-www-form-urlencoded: BODY에 Key, Value 사용&lt;/li&gt;
      &lt;li&gt;Text/plain : 단순 txt 파일&lt;/li&gt;
      &lt;li&gt;Multipartform-data : 데이터를 바이너리 데이터로 전송&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FastAPI&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pydantic&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseModel&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/items/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;POST 요청으로 item을 생성하는 예제&lt;/li&gt;
  &lt;li&gt;pydantic으로 request body 데이터 정의&lt;/li&gt;
  &lt;li&gt;Type hinting에 위에서 생성한 클래스 주입&lt;/li&gt;
  &lt;li&gt;request body 데이터를 validation&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;response-body&quot;&gt;Response Body&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;API response -&amp;gt; client : response body&lt;/li&gt;
  &lt;li&gt;데코레이터의 response_model 인자로 주입 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FastAPI&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pydantic&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseModel&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;items/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Output 데이터를 해당 정의에 맞게 변형&lt;/li&gt;
  &lt;li&gt;데이터 validation&lt;/li&gt;
  &lt;li&gt;response에 대한 JSON Schema 추가&lt;/li&gt;
  &lt;li&gt;자동으로 문서화&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;form&quot;&gt;Form&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Form 입력 형태로 데이터를 받고 싶은 경우&lt;/li&gt;
  &lt;li&gt;Form을 사용하려면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install python-multipart&lt;/code&gt; 으로 설치
    &lt;ul&gt;
      &lt;li&gt;+간단한 프론트를 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install Jinja2&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/login&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Form에서 입력된 값을 가져와서 사용한다
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Form 클래스를 사용하면 request의 form data에서 값을 가져옴&lt;/li&gt;
  &lt;li&gt;Localhost:8000/login/ 으로 이동
    &lt;ul&gt;
      &lt;li&gt;login으로 접근해서 GET method가 요청됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastapi.templating&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jinja2Templates&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jinja2Templates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/login/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_login_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# login_form.html for frontend login page
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TemplateResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;login_form.html&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/login/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;login_form.html 로 login 페이지 구성&lt;/li&gt;
  &lt;li&gt;제출을 누르면 login 함수 실행(POST 요청)&lt;/li&gt;
  &lt;li&gt;Form(…) -&amp;gt; Python ellipsis, 필수적인 요소를 의미
    &lt;ul&gt;
      &lt;li&gt;FastAPI 웹 서버 실행 후 Swagger로 이동하면 required를 볼 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;file&quot;&gt;File&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;File 업로드의 경우&lt;/li&gt;
  &lt;li&gt;Python-multipart 설치 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typing&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastapi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UploadFile&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fastapi.responses&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTMLResponse&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvicorn&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FastAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/files/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;file_sizes&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/uploadfiles/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_upload_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UploadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;filenames&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
&amp;lt;body&amp;gt;
&amp;lt;form action=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/files/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; enctype=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;multipart/form-data&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;
&amp;lt;input type=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; multiple&amp;gt;
&amp;lt;input type=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;form action=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/uploadfiles/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; method=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; enctype=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;multipart/form-data&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;
&amp;lt;input type=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; multiple&amp;gt;
&amp;lt;input type=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HTMLResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;”/”로 접근할 때 보여줄 HTML 코드&lt;/li&gt;
  &lt;li&gt;HTML에서 action으로 넘김&lt;/li&gt;
  &lt;li&gt;파일을 bytes로 표현&lt;/li&gt;
  &lt;li&gt;여러 파일은 List에 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;pydantic&quot;&gt;Pydantic&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;FastAPI에서 Class를 사용할 때&lt;/li&gt;
  &lt;li&gt;Data validation / Setting management 라이브러리&lt;/li&gt;
  &lt;li&gt;Type Hint를 런타임에서 강제해 안전하게 데이터 핸들링&lt;/li&gt;
  &lt;li&gt;파이썬 기본 타입(str, int ..) + List, Dict, Tuple 에 대한 validtation 지원&lt;/li&gt;
  &lt;li&gt;기존 validation 라이브러리 보다 빠름&lt;/li&gt;
  &lt;li&gt;config를 효과적으로 관리&lt;/li&gt;
  &lt;li&gt;머신러닝 feature data validation으로도 활용 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;validation&quot;&gt;Validation&lt;/h3&gt;

&lt;p&gt;Machine learning model의 input을 validation 하는 경우&lt;/p&gt;

&lt;p&gt;Online serving에서 input 데이터에 대한 validation&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;여러가지 validation을 하는 로직이 있을 수 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용할 수 있는 방법은 Python class, Dataclass, Pydantic&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;pydantic-config&quot;&gt;Pydantic Config&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Validation 처럼 pydantic은 BaseSettings를 상속한 클래스에서 Type Hint로 주입된 설정 데이터를 검증할 수 있음&lt;/li&gt;
  &lt;li&gt;Field 클래스의 env 인자로, 환경 변수로 부터 해당 필드를 오버라이딩 가능&lt;/li&gt;
  &lt;li&gt;yaml, ini 파일들을 추가적으로 만들지 않고, .env 파일들을 환경변수로 만들어 두거나, 실행 환경에서 유연하게 오버라이딩 할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zzsza&quot;&gt;https://github.com/zzsza&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Naver Connection Boostcamp AI Tech 5th - Product Serving(변성윤)&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 04 Jul 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/FastAPI-1/</link>
        <guid isPermaLink="true">http://localhost:4000/FastAPI-1/</guid>
        
        
        <category>Backend</category>
        
        <category>FastAPI</category>
        
      </item>
    
      <item>
        <title>Backend Overview</title>
        <description>&lt;hr /&gt;
&lt;h2 id=&quot;서버-구성-use-case&quot;&gt;서버 구성 Use Case&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;앱/웹 서비스의 서버&lt;/li&gt;
  &lt;li&gt;머신러닝 서버&lt;/li&gt;
  &lt;li&gt;하나의 큰 서버가 사용 영역 별로 분할 되어 사용되는 경우&lt;/li&gt;
  &lt;li&gt;서비스 서버에서 머신러닝 서버로 예측 요청하며 통신하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;서버의-형태&quot;&gt;서버의 형태&lt;/h2&gt;

&lt;h3 id=&quot;모놀로식-아키텍쳐monolothic-architecture&quot;&gt;모놀로식 아키텍쳐(Monolothic Architecture)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;하나의 큰 서버&lt;/li&gt;
  &lt;li&gt;모든 것을 하나의 큰 서버에서 처리&lt;/li&gt;
  &lt;li&gt;전체 서버를 배포해야해서 배포가 느림&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;마이크로-서비스-아키텍쳐micro-service-architecture---msa&quot;&gt;마이크로 서비스 아키텍쳐(Micro Service Architecture - MSA)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;개별의 서버로 구성하고 서로 통신하도록 하는 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;rest-api&quot;&gt;Rest API&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;REST API는 정보를 주고 받을 때 널리 사용되는 형식으로 생각하면 된다&lt;/li&gt;
  &lt;li&gt;REST라는 형식의 API
    &lt;ul&gt;
      &lt;li&gt;각 요청이 어떤 동작이나 정보를 위한 것을 요청 모습 자체로 추론 할 수 있음&lt;/li&gt;
      &lt;li&gt;기본적인 데아터 처리 CRUD : Create, Read, Update, Delete&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Representational State Transfer의 약자
    &lt;ul&gt;
      &lt;li&gt;Resource, Method, Representation of Resource로 구성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클라이언트 : 요청을 하는 플랫폼
    &lt;ul&gt;
      &lt;li&gt;브라우저 같은 웹&lt;/li&gt;
      &lt;li&gt;앱&lt;/li&gt;
      &lt;li&gt;우리가 파이썬을 사용해 요청하는 것도 클라이언트&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Resource : Unique한 ID를 가지는 리소스, URI&lt;/li&gt;
  &lt;li&gt;Method : 서버에 요청을 보내기 위한 방식 : GET, POST, PUT, PATCH, DELETE&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;uri-url&quot;&gt;URI, URL&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;URL : Uniform Resource Locator, 인터넷 상 자원의 위치&lt;/li&gt;
  &lt;li&gt;URI : Uniform Resource Identifier, 인터넷 상의 자원을 식별하기 위한 문자열의 구성&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;URI는 URL을 포함, URI &amp;gt; URL&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;http-method&quot;&gt;HTTP Method&lt;/h2&gt;

&lt;h3 id=&quot;get-vs-post&quot;&gt;GET vs POST&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;GET : 정보 요청을 위해 사용(Read)
    &lt;ul&gt;
      &lt;li&gt;어떤 정보를 가져와서 조회하기 위해 사용되는 방식&lt;/li&gt;
      &lt;li&gt;URL에 변수(데이터)를 포함시켜서 요청함&lt;/li&gt;
      &lt;li&gt;데이터를 헤더에 포함하여 전송함&lt;/li&gt;
      &lt;li&gt;URL에 데이터가 노출되어 보안에 취약&lt;/li&gt;
      &lt;li&gt;캐싱할 수 있음(다른 방법과 비교해서 빠를 수 있음)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;POST : 정보를 입력하기 위해 사용(Create)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;데이터를 서버로 제출해 추가 또는 수정하기 위해 사용하는 방식&lt;/li&gt;
      &lt;li&gt;URL에 변수(데이터)를 노출하지 않고 요청&lt;/li&gt;
      &lt;li&gt;데이터를 Body에 포함&lt;/li&gt;
      &lt;li&gt;URL에 데이터가 노출되지 않아 기본 보안은 되어 있음&lt;/li&gt;
      &lt;li&gt;캐싱 불가능(그 안에 아키텍쳐로 캐싱은 가능함)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/Backend/getvspost2.png&quot; alt=&quot;getvspost2&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/Backend/get vs post.jpeg&quot; alt=&quot;get vs post&quot; style=&quot;zoom:100%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;출처 - https://stackoverflow.com/questions/43934585/which-http-method-get-or-post-i-should-use-for-creating-php-restfull-login-api &lt;/p&gt;
&lt;h3 id=&quot;put-patch-delete&quot;&gt;PUT, PATCH, DELETE&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;PUT : 정보를 업데이트하기 위해 사용(Update)&lt;/li&gt;
  &lt;li&gt;PATCH : 정보를 업데이트하기 위해 사용(Update)&lt;/li&gt;
  &lt;li&gt;DELETE : 정보를 삭제하기 위해 사용(Delete)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;header-body&quot;&gt;Header, Body&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Http 통신은 Request를 하고, Response를 받을 때 정보를 Packet(패킷)에 저장&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Packet 구조: Header/Body&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Header : 보내는 주소, 받는 주소, 시간&lt;/li&gt;
  &lt;li&gt;Body : 실제 전달하려는 내용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-03-Backend/스크린샷 2023-07-02 오후 5.55.37.png&quot; alt=&quot;스크린샷 2023-07-02 오후 5.55.37&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;status-code&quot;&gt;Status Code&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트의 요청에 따라 서버가 어떻게 반응하는지 알려주는 코드&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;1xx : 요청을 받았고, 프로세스를 진행함&lt;/li&gt;
  &lt;li&gt;2xx : 요청을 성공적으로 받았고 실행함&lt;/li&gt;
  &lt;li&gt;3xx : 요청 완료를 위한 추가 작업 필요&lt;/li&gt;
  &lt;li&gt;4xx : 요청 문법이 잘못되었거나 요청을 처리할 수 없음&lt;/li&gt;
  &lt;li&gt;5xx : 서버가 요청에 대해 실패함&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;동기와-비동기sync-async&quot;&gt;동기와 비동기(Sync, Async)&lt;/h2&gt;

&lt;h3 id=&quot;동기sync&quot;&gt;동기(Sync)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;서버에서 요청을 보냈을 때, 응답이 돌아와야 다음 동작을 수행 할 수 있음. A 작업이 모두 완료될 때까지 B 작업은 대기&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;비동기async&quot;&gt;비동기(Async)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;요청을 보낼 때 응답 상태와 상관없이 다음 동작을 수행함. A 작업과 B 작업이 동시에 실행됨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;상황에 따라 동기적, 비동기적으로 구현할건지 정하면 됨&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ip&quot;&gt;IP&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크에 연결된 특정 PC주소를 나타내는 체계&lt;/li&gt;
  &lt;li&gt;Internet Protocol&lt;/li&gt;
  &lt;li&gt;4그룹의 숫자로 구성된 IP 주소 체계를 IPv4라고 함&lt;/li&gt;
  &lt;li&gt;각 그룹마다 0~255로 나타낼 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;용도가-정해진-경우&quot;&gt;용도가 정해진 경우&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;localhost, 127.0.0.1 : 현재 사용중인 local PC&lt;/li&gt;
  &lt;li&gt;0.0.0.0, 255.255.255.255 : broadcast address, 로컬 네트워크에 접속된 모든 장치와 소통하는 주소&lt;/li&gt;
  &lt;li&gt;개인 PC보급으로 누구나 PC를 사용해 IPv4로 할당할 수 있는 한계점을 진입해서 IPv6 등장&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;port포트&quot;&gt;Port(포트)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;IP주소 뒤에서 나오는 숫자&lt;/li&gt;
  &lt;li&gt;PC에 접속할 수 있는 통로(채널)&lt;/li&gt;
  &lt;li&gt;사용중인 포트는 중복 불가&lt;/li&gt;
  &lt;li&gt;Example) 주피터 노트북은 8888&lt;/li&gt;
  &lt;li&gt;포트는 0~65535까지 존재&lt;/li&gt;
  &lt;li&gt;0~1024는 통신을 위한 규약에 정해짐&lt;/li&gt;
  &lt;li&gt;Example)
    &lt;ul&gt;
      &lt;li&gt;22 : SSH&lt;/li&gt;
      &lt;li&gt;80 : HTTP&lt;/li&gt;
      &lt;li&gt;443 : HTTPS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zzsza&quot;&gt;https://github.com/zzsza&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Naver Connection AI Tech 5th - Product Serving(변성윤)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://geekflare.com/backend-solutions-for-web-and-mobile-apps/&quot;&gt;https://geekflare.com/backend-solutions-for-web-and-mobile-apps/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 03 Jul 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/Backend/</link>
        <guid isPermaLink="true">http://localhost:4000/Backend/</guid>
        
        
        <category>Backend</category>
        
      </item>
    
      <item>
        <title>CI/CD Basic - 1</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;개발-환경&quot;&gt;개발 환경&lt;/h2&gt;
&lt;h3 id=&quot;local&quot;&gt;Local&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;각자의 컴퓨터에서 개발&lt;/li&gt;
  &lt;li&gt;각 환경을 통일 시키기 위해 docker 또는 pyenv, venv 사용&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;development&quot;&gt;Development&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Local에서 개발한 기능을 테스트 하는 환경&lt;/li&gt;
  &lt;li&gt;테스트 서버&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;staging&quot;&gt;Staging&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Production 환경에 배포하기 전에 운영하거나 보안, 성능을 측정하는 환경&lt;/li&gt;
  &lt;li&gt;Staging 서버&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;production&quot;&gt;Production&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;실제 서비스를 운영하는 환경&lt;/li&gt;
  &lt;li&gt;운영 서버&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;개발 환경을 나누는 것은 실제 운영중인 서비스에 장애가 생기는 것을 방지하기 위함. 만약에 dev, staging, production 환경이 동일하다면 소스 코드를 저장하는 즉시 반영이 된다고 생각하면 됨.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cicd란&quot;&gt;CI/CD란?&lt;/h2&gt;

&lt;h3 id=&quot;continuous-integration지속적-통합&quot;&gt;Continuous Integration(지속적 통합)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;새로 작성한 코드 변경 사항이 Build, Test를 진행한 후 Test Case를 통과하는지 확인&lt;/li&gt;
  &lt;li&gt;지속적으로 코드 품질 관리&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;continuous-delivery-deployment지속적-배포&quot;&gt;Continuous Delivery, Deployment(지속적 배포)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;작성한 코드가 신뢰 가능한 상태가 되면(CI를 통과하면) 자동으로 배포될 수 있도록 하는 과정&lt;/li&gt;
  &lt;li&gt;CI 이후 CD&lt;/li&gt;
  &lt;li&gt;development, staging, main 브랜치에 merge 되는 경우 코드가 자동으로 서버에 배포&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;간단하게 요약하자면&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;CI : 빌드, 테스트의 자동화&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CD : 배포 자동화&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cicd-solutions&quot;&gt;CI/CD Solutions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Jenkins, Travis CI, AWS CodeDeploy, Github Action etc..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/2023-07-02-CICD/stages-of-ci-cd-pipeline.png&quot; alt=&quot;stages-of-ci-cd-pipeline&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;출처 - https://www.simform.com/blog/scalable-ci-cd-pipeline-examples/ &lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;github-action&quot;&gt;Github Action&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Github에서 출시한 기능으로, 소프트웨어 workflow 자동화를 도와주는 도구&lt;/li&gt;
  &lt;li&gt;Test code, Deployment, Shell script&lt;/li&gt;
  &lt;li&gt;Github tag, release 자동 설정&lt;/li&gt;
  &lt;li&gt;새로운 브랜치 생성시 특정 작업 실행&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다양한 Workflow template이 존재 https://github.com/sdras/awesome-actions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Private repo는 유료
    &lt;ul&gt;
      &lt;li&gt;유료와 무료 사이의 제한이나 제약 조건, 과금에 대한 내용 찾아봐서 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;github-action-사용-방식&quot;&gt;Github Action 사용 방식&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;코드 작업&lt;/li&gt;
  &lt;li&gt;작업 후, Github Action으로 무엇을 할 것인지 생각&lt;/li&gt;
  &lt;li&gt;사용할 Workflow 정의&lt;/li&gt;
  &lt;li&gt;Workflow 정의 후 정상 작동하는지 확인&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;github-action-workflow&quot;&gt;Github Action Workflow&lt;/h2&gt;

&lt;h3 id=&quot;workflow&quot;&gt;Workflow&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;여러 Job으로 구성, Event로 Trigger되는 자동화된 프로세스&lt;/li&gt;
  &lt;li&gt;Workflow 파일은 YAML로 작성, 레포지토리의 ./github/workflows에 저장&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;event&quot;&gt;Event&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Workflow를 trigger하는 특정 행동, 규칙&lt;/li&gt;
  &lt;li&gt;Example
    &lt;ul&gt;
      &lt;li&gt;특정 브랜치로 Push&lt;/li&gt;
      &lt;li&gt;특정 브랜치로 Pull Request&lt;/li&gt;
      &lt;li&gt;특정 시간대에 반복&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jobs&quot;&gt;Jobs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Runner에서 실행되는 Steps들의 조합&lt;/li&gt;
  &lt;li&gt;여러 Jobs이 있는 경우 병렬로 실행, 순차적 실행도 가능
    &lt;ul&gt;
      &lt;li&gt;다른 Job에 의존 관계를 가질 수 있음&lt;/li&gt;
      &lt;li&gt;Example) Job A Success -&amp;gt; Run Job B&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Job에서 실행되는 개별 작업&lt;/li&gt;
  &lt;li&gt;Action을 실행하거나 쉘 커맨드 실행&lt;/li&gt;
  &lt;li&gt;하나의 Job에서 데이터를 공유할 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;actions&quot;&gt;Actions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Workflow에서 제일 작은 단위&lt;/li&gt;
  &lt;li&gt;Job을 생성하기 위해 여러 step을 묶은 개념&lt;/li&gt;
  &lt;li&gt;재사용 가능한 component&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;runner&quot;&gt;Runner&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Github Action도 일종의 서버에서 실행되는 개념&lt;/li&gt;
  &lt;li&gt;Runner -&amp;gt; Workflow가 실행될 서버
    &lt;ul&gt;
      &lt;li&gt;Github-hosted runner&lt;/li&gt;
      &lt;li&gt;Self-hosted runner&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zzsza&quot;&gt;https://github.com/zzsza&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Naver Connection Boostcamp AI Tech 5th - Product Serving(변성윤)&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 02 Jul 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/CICD/</link>
        <guid isPermaLink="true">http://localhost:4000/CICD/</guid>
        
        
        <category>CI/CD</category>
        
      </item>
    
      <item>
        <title>Cloud Computing</title>
        <description>&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;클라우드를-사용하는-이유&quot;&gt;클라우드를 사용하는 이유&lt;/h2&gt;
&lt;h3 id=&quot;what-is-cloud&quot;&gt;What is Cloud?&lt;/h3&gt;
&lt;p&gt;Google Cloud에서 정의하는 Cloud Computing은 다음과 같다&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;클라우드 컴퓨팅은 컴퓨팅 리소스를 인터넷을 통해 서비스로 사용할 수 있는 주문형 서비스이다. 기업에서 직접 리소스를 조달하거나 구성, 관리할 필요가 없으며 사용한 만큼만 비용을 지불하면 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;why-use-cloud&quot;&gt;Why use Cloud?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;기존의 전통적인 서버실(Internet Data Center)를 운영하려면, 물리적 공간과 확장성(scalability)까지 고려를 해야 함&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Example1) 트래픽이 몰리는 경우 컴퓨터 10대를 더 추가 설치하기 어려움&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Example2) 트래픽이 적어지면 컴퓨터 10대를 없애야 하나?&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;클라우드 서비스가 점점 발전함에 따라, 개발자가 직접 설정해야 했던 작업을 클라우드에서 쉽게하는 방향으로 발전(cloud managed service)&lt;/li&gt;
  &lt;li&gt;Apache Spark를 쉽게 운영할 수 있도록 AWS EMR, GCP Dataproc 활용(직접 하둡, 등을 설치 할 필요 없이 이미 설치되어 있음)&lt;/li&gt;
  &lt;li&gt;여러가지 환경을 미리 설치해두고 사용하는 것이 편함(tensorflow, CUDA)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cloud의-다양한-서비스&quot;&gt;Cloud의 다양한 서비스&lt;/h2&gt;

&lt;p&gt;다음은 Google Cloud에서 정의하는 PaaS, IaaS, SaaS이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SaaS(Software as a Service)
    &lt;ul&gt;
      &lt;li&gt;SaaS(Software as a service)는 전체 애플리케이션 스택을 제공하여 고객이 액세스하고 사용할 수 있는 전체 클라우드 기반 애플리케이션을 제공&lt;/li&gt;
      &lt;li&gt;SaaS 제품은 서비스 제공업체에서 모든 업데이트, 버그 수정, 전반적인 유지관리 등을 전적으로 관리하며 즉시 사용할 수 있다&lt;/li&gt;
      &lt;li&gt;대부분의 SaaS 애플리케이션은 웹브라우저를 통해 직접 액세스할 수 있으므로 고객이 기기에 아무것도 다운로드하거나 설치할 필요가 없다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;PaaS(Platform as a Service)
    &lt;ul&gt;
      &lt;li&gt;PaaS(Platform as a Service)는 클라우드를 통해 애플리케이션을 개발하는 데 필요한 모든 하드웨어 및 소프트웨어 리소스를 제공하고 관리한다&lt;/li&gt;
      &lt;li&gt;개발자와 IT 운영팀은 인프라 또는 플랫폼을 자체적으로 빌드하고 유지관리할 필요 없이 PaaS를 사용하여 애플리케이션을 개발, 실행, 관리할 수 있다&lt;/li&gt;
      &lt;li&gt;고객은 여전히 코드를 작성하고 데이터와 애플리케이션을 관리해야 하지만, 클라우드 서비스 제공업체에서 앱을 빌드하고 배포하는 환경을 관리하고 유지관리한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;IaaS(Infrastructure as a Service)
    &lt;ul&gt;
      &lt;li&gt;IaaS(Infrastructure as a Service)는 클라우드를 통해 컴퓨팅, 스토리지, 네트워킹, 가상화와 같은 주문형 인프라 리소스를 조직에 제공한다&lt;/li&gt;
      &lt;li&gt;고객이 자체 데이터 센터 인프라를 관리, 유지관리 또는 업데이트할 필요는 없지만 운영체제, 미들웨어, 가상 머신, 앱 또는 데이터를 책임진다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/Cloud/cloudservice-2.jpeg&quot; alt=&quot;cloudservice-2&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;출처 : https://www.stackscale.com/blog/cloud-service-models/&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/Cloud/cloud -1.jpeg&quot; alt=&quot;cloud -1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;출처 : https://cloud.google.com/learn/paas-vs-iaas-vs-saas?hl=ko&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cloud-서비스-기업&quot;&gt;Cloud 서비스 기업&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;AWS, Google Cloud, Azure, Naver Cloud Platform&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cloud-제품&quot;&gt;Cloud 제품&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Computing Service(Server)
    &lt;ul&gt;
      &lt;li&gt;연산을 수행하는 서비스&lt;/li&gt;
      &lt;li&gt;가상 컴퓨터, 서버, VM(virtual machine), Instance(인스턴스)&lt;/li&gt;
      &lt;li&gt;가장 많이 사용하는 제품&lt;/li&gt;
      &lt;li&gt;회사별로 월 무료 사용량이 존재&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Serverless Computing&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;computing service와 유사하지만, 서버 관리를 클라우드쪽에 진행&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;코드를 클라우드에 제출하면, 그 코드를 가지고 서버를 실행해주는 형태&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;요청 부하에 따른 자동확장 가능(auto scaling)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Micro Service로 많이 활용&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stateless Container&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Docker를 사용한 컨테이너 기반으로 서버를 실행하는 구조&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Docker image를 업로드하면 해당 이미지 기반으로 서버를 실행해주는 형태&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Object Storage&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;다양한 오브젝트를 저장할 수 있는 저장소&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;다양한 형태의 데이터를 저장 가능, API를 사용해 데이터에 접근 가능&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;머신러닝 모델의 pkl, csv 파일, 실험 로그 등을 저장할 수 있음&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Database(RDB)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;웹, 앱서비스와 데이터베이스가 연결되어 있는 경우가 많으며, 대표적으로 MySQL, PosgreSQL 등을 사용할 수 있음&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;보통 사용자 로그 데이터는 데이터베이스에 저장하지만, 저장된 데이터를 어떻게 사용하냐에 따라 Database에 저장할지, Object Storage에 저장할지 결정&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Data Warehouse&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;데이터베이스, 스토리지에 있는 데이터 등을 모두 모아서 웨어하우스에 저장&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;데이터 분석에 특화된 데이터베이스&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;퍼포먼스 빠름&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zzsza&quot;&gt;https://github.com/zzsza&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/learn/paas-vs-iaas-vs-saas?hl=ko&quot;&gt;https://cloud.google.com/learn/paas-vs-iaas-vs-saas?hl=ko&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Naver Connection Boostcamp AI Tech 5th - Product Serving(변성윤)&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 30 Jun 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/Cloud/</link>
        <guid isPermaLink="true">http://localhost:4000/Cloud/</guid>
        
        
        <category>Software Engineering</category>
        
        <category>Cloud</category>
        
      </item>
    
      <item>
        <title>Semantic Segmentation Overview</title>
        <description>&lt;hr /&gt;
&lt;h2 id=&quot;semantic-segmentation&quot;&gt;Semantic Segmentation&lt;/h2&gt;
&lt;h3 id=&quot;what-is-semantic-segmentation&quot;&gt;What is Semantic Segmentation?&lt;/h3&gt;
&lt;p&gt;Semantic Segmentation은 이미지의 모든 픽셀별로 클래스를 분류하는 task 이다. 말 그대로 pixel wise classification이라서 같은 클래스에 속하더라도 객체를 구분해주지는 않는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/semantic_segmentation/ss1.png&quot; alt=&quot;ss1&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;출처 - CS231n &lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;ideas-used-for-semantic-segmentation&quot;&gt;Ideas used for Semantic Segmentation&lt;/h2&gt;

&lt;h3 id=&quot;sliding-window&quot;&gt;Sliding Window&lt;/h3&gt;

&lt;p&gt;이미지를 수 많은 작은 단위(crop)으로 나눠서 각자의 영역에 image classification을 진행하는 방법. 이 경우에 computation cost가 굉장히 많이 들고, crop 되는 영역이 겹칠 경우에는 인접한 feature에 대한 공통의 계산을 해야하기 때문에 비효율적이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/semantic_segmentation/sliding window.png&quot; alt=&quot;sliding window&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;출처 - CS231n &lt;/p&gt;

&lt;h3 id=&quot;fully-convolutional-networkfcn&quot;&gt;Fully Convolutional Network(FCN)&lt;/h3&gt;

&lt;p&gt;FC layer가 없는 convolution layer만 구성된 네트워크를 사용하는 방법이다. 이미지가 flatten되는 과정에서 공간정보를 잃게되는데, conv layer만 사용할 경우 공간정보를 유지할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/semantic_segmentation/fc vs FCN.PNG&quot; alt=&quot;fc vs FCN&quot; style=&quot;zoom:150%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;출처 - Fully Convolutional Networks for Semantic Segmentation &lt;/p&gt;

&lt;p&gt;Downsampling 된 이미지 상태에서는 segmentation을 진행 할 수는 없기 때문에 이미지를 다시 키우는 upsampling을 진행한다. Upsampling 방법에는 여러가지가 있지만 대표적으로 deconvolution(transpose convolution) 연산을 이용한다.(수학에서 말하는 deconvolution과는 다른 연산. CNN에서 이야기하는 convolution 연산도 정확하게는 cross corelation 연산이기 때문에 용어 사용에 주의를 할 필요가 있다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/semantic_segmentation/downsample and upsample.png&quot; alt=&quot;downsample and upsample&quot; style=&quot;zoom:80%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;출처 - CS231n &lt;/p&gt;

&lt;h4 id=&quot;upsampling&quot;&gt;Upsampling&lt;/h4&gt;

&lt;h5 id=&quot;unpooling--nearest-neighbor-bed-of-nails&quot;&gt;Unpooling : Nearest Neighbor, Bed of Nails&lt;/h5&gt;

&lt;p&gt;Fixed algorithm을 이용하는 방식. Receptive field를 복사하거나 빈자리에 0을 채워 넣는 방식이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/semantic_segmentation/unpooling.png&quot; alt=&quot;unpooling&quot; style=&quot;zoom:67%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;Unpooling - 출처 - CS231n &lt;/p&gt;

&lt;h5 id=&quot;deconvolutiontranspose-convolution&quot;&gt;Deconvolution(Transpose Convolution)&lt;/h5&gt;

&lt;p&gt;Unpooling의 경우 고정된 함수로 진행하는 연산이기 때문에 학습과정을 거치지 않는다. 반면에 deconvolution의 경우 upsampling하는 과정을 학습한다. Deconvolution은 아주 간단하게 생각한다면 convolution 연산을 반대로 한다고 생각하면 된다. 과정을 간단하게 설명하자면, input feature map에서 좌상단 부터 차례대로 scalar 값을 하나씩 뽑고 filter와 곱해서 그 출력을 output region 복사한다. Overlapping 되는 영역을 sum을 해준다. (아래 그림을 참고)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/semantic_segmentation/deconvolution2.PNG&quot; alt=&quot;deconvolution2&quot; style=&quot;zoom:100%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;Transposed Convolution - 출처 - Dive into Deep Learning &lt;/p&gt;

&lt;p&gt;Spatial size를 키워주기 위해서 학습가능한 filter를 사용한다고 보면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/semantic_segmentation/no_padding_no_strides_transposed.gif&quot; alt=&quot;no_padding_no_strides_transposed&quot; style=&quot;zoom:100%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;Transposed Convolution - 출처 - https://github.com/vdumoulin/conv_arithmetic &lt;/p&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;Deconvolution 하는 과정에서 작은 이미지를 과도하게 늘리는 과정에서 feature에 대한 정보가 유실되는 경우가 많다. 이를 해결하기 위해서 FCN에서는 skip architecture를 사용한다.&lt;/p&gt;

&lt;h4 id=&quot;skip-architecture-in-fcnfully-convolutional-networks-for-semantic-segmentation&quot;&gt;Skip Architecture in FCN(Fully Convolutional Networks for Semantic Segmentation)&lt;/h4&gt;

&lt;p&gt;FCN에서 이용한 skip architecture를 간단하게 설명하자면, convolution(encoding path)에서 나온 feature map을 deconvolution(decoding path)에서 나온 결과와 더해주는 것 이다. FCN 논문에서는 low layer information과 high layer information을 combine한다는 표현을 쓴다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/semantic_segmentation/skiparchitecture2.PNG&quot; alt=&quot;skiparchitecture2&quot; style=&quot;zoom:100%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;Skip Architecture - 출처 - Fully Convolutional Networks for Semantic Segmentation &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../post_images/semantic_segmentation/skiparchitecture.PNG&quot; alt=&quot;skiparchitecture&quot; style=&quot;zoom:100%;&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;FCN - 32, 16, 8 - 출처 - Fully Convolutional Networks for Semantic Segmentation &lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;이런 FCN 개념을 이용한 semantic segmentation은 결국은 convolution network를 통한 downsampling/upsampling을 진행해서 pixel에 대한 cross-entropy를 계산하여 네트워크를 end-to-end로 학습 가능하다.&lt;/p&gt;

&lt;p&gt;Semantic Segmentation은 기본적인 segmentation task이며, 더 많은 요소까지 고려한 다양한 segmentation task들이 존재한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;further-studying&quot;&gt;Further Studying&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Instance Segmentation&lt;/li&gt;
  &lt;li&gt;Panoptic Segmentation&lt;/li&gt;
  &lt;li&gt;Depth estimation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vT1JzLTH4G4&amp;amp;list=PLC1qU-LWwrF64f4QKQT-Vg5Wr4qEE1Zxk&quot;&gt;CS231n&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vdumoulin/conv_arithmetic&quot;&gt;https://github.com/vdumoulin/conv_arithmetic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1411.4038&quot;&gt;Fully Convolutional Networks for Semantic Segmentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://d2l.ai/&quot;&gt;Dive into Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 05 Jun 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/semantic_segmentation/</link>
        <guid isPermaLink="true">http://localhost:4000/semantic_segmentation/</guid>
        
        
        <category>CV</category>
        
        <category>Segmentation</category>
        
      </item>
    
  </channel>
</rss>
